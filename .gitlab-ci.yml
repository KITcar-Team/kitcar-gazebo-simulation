image: git.kitcar-team.de:4567/kitcar/kitcar-gazebo-simulation/ci:focal

variables:
  GIT_STRATEGY: clone
  GIT_LFS_SKIP_SMUDGE: '1'  #  Don't pull Git LFS
  CAR_NAME: dr_drift
  KITCAR_REPO_PATH: /builds/kitcar/
  INIT_INPUT: 1\nyn   # Omit machine learning and documentation packages by default, as they are only used by a few jobs.
  DISPLAY: ":1.0"

before_script:
  # Run the container start script to enable the pulseaudio & xserver
- bash init/docker_start_script.sh

  # Print out python version for debugging
- python3 -V

  # Install packages and requirements
- printf $INIT_INPUT | ./init/init.sh || true

- source init/bashrc || true

stages:
- build
- test
- deploy


######## BUILD STAGE ########
# build kitcar-ros and simulation
build-code:
  stage: build
  script:
  - cd  simulation
  - catkin_make
  artifacts:
    paths:
    - simulation/devel
    - simulation/build
    expire_in: 2 day

lint:
  stage: build
  script:
  # Check if all files are correctly formatted and comply to our formatting rules.
  - pre-commit run --all-files

######## TEST STAGE #########

# Run module test in utils packages
test-python-packages:
  stage: test
  script:
  - python3 -m simulation.utils.geometry.test
  - python3 simulation/utils/ros_base/test/parameter_object_test.py

  - python3 -m simulation.utils.road.sections.test

  - python3 -m simulation.src.simulation_evaluation.src.speaker.speakers.test
  - python3 -m simulation.src.simulation_evaluation.src.state_machine.test

    # Test the urdf package
  - python3 simulation/utils/urdf/test/test_core.py

test-machine-learning-package:
  image: git.kitcar-team.de:4567/kitcar/kitcar-gazebo-simulation/ci:machine_learning
  stage: test
  variables:
    INIT_INPUT: 1\nyy
  script:
  - python3 -m simulation.utils.machine_learning.models.test
  - python3 -m simulation.utils.machine_learning.cycle_gan.models.test
  - python3 -m simulation.utils.machine_learning.data.test
    # Test if the camera publishes images with the cycle gan turned on
  - dvc pull simulation/utils/machine_learning/cycle_gan/checkpoints/dr_drift_256/latest_net_g_b_to_a.pth
  - git lfs pull --include=simulation/utils/machine_learning/cycle_gan/resources/mask.png
  - rostest simulation_brain_link sensor_camera.test apply_gan:=true use_wasserstein_gan:=false
  - rostest simulation_brain_link sensor_camera.test apply_gan:=true use_wasserstein_gan:=true

test-ros-packages:
  stage: test
  script:
  - cd simulation
  - catkin_make run_tests -j1
  - catkin_test_results    # Ensure that pipeline fails when test fails

# Run tests to ensure that the evaluation pipeline is working
test-drive-evaluation:
  stage: test
  tags:
    # Always require to use the workstation to ensure enough computational power
  - workstation
  variables:
    PATH_FILES: $KITCAR_REPO_PATH/kitcar-gazebo-simulation/simulation/src/simulation_evaluation/param/drive/paths
  script:
    # The drive.test is used to evaluate how the car drives.
    # With automatic_drive:=true the path of the car is predetermined and thus the correctness
    # of the evaluation can be tested.
  - python3 -m simulation.utils.drive_test.run --config simulation/utils/drive_test/test/ci.yaml

test-documentation:
  image: git.kitcar-team.de:4567/kitcar/kitcar-gazebo-simulation/ci:docs
  stage: test
  variables:
    INIT_INPUT: 1\nyy
    GIT_LFS_SKIP_SMUDGE: '0'  #  Pull git lfs
  script:
    # Test if the onboarding documentation is correct
  - python3 docs/content/tutorials/road_examples/example.py
  - cd docs
  - make doctest

######### Documentation ########

# Build the sphinx documentation
# If this is the master branch, the website deployer will also update doc.kitcar-team.de!
build-documentation:
  image: git.kitcar-team.de:4567/kitcar/kitcar-gazebo-simulation/ci:docs
  stage: deploy
  variables:
    INIT_INPUT: 1\nyy
    GIT_LFS_SKIP_SMUDGE: '0'  #  Pull git lfs
  script:
    # Build the documentation
  - cd docs
  - make html
  artifacts: # Extract artifacts to view the documentation that has been generated
    paths:
    - docs/_build/html/*
    expire_in: 2 day

cml-cyclegan:
  stage: deploy
  image: git.kitcar-team.de:4567/kitcar/kitcar-gazebo-simulation/ci:machine_learning
  when: manual
  variables:
    INIT_INPUT: 1\nyy
  tags:
  - workstation
  script:
  - git lfs pull --include=simulation/utils/machine_learning/cycle_gan/resources/mask.png
  - dvc pull data/real_images/maschinen_halle_parking
  - dvc pull data/simulated_images/test_images
  - cd simulation/utils/machine_learning/cycle_gan
    # pull cache from server and checkout
  - dvc pull dvc.yaml --run-cache
    # Test current model, make videos and commit to dvc
  - dvc repro test_dr_drift_256 -s
  - dvc repro test_discriminators_dr_drift_256 -s
  - dvc repro make_video_dr_drift_256 -s
  - cd ../../../../
    # Create content for the report.md
  - echo "# Dr Drift 256" >> report.md
  - echo "## Test Generators" >> report.md
  - cml-publish simulation/utils/machine_learning/cycle_gan/results/dr_drift_256/stacked.mp4 --gitlab-uploads
    --md --title 'MP4' >> report.md
  - echo "<br>" >> report.md
  - echo "## Test Discriminators" >> report.md
  - losses=`cat simulation/utils/machine_learning/cycle_gan/results/dr_drift_256/discriminator_losses.txt`
  - A="$(cut -d',' -f1 <<<"$losses")"
  - B="$(cut -d',' -f2 <<<"$losses")"
  - echo "**AVG-Loss Discriminator A =** $A" >> report.md
  - echo "<br>" >> report.md
  - echo "**AVG-Loss Discriminator B =** $B" >> report.md
  - echo "<br>" >> report.md
  - echo "## Loss values" >> report.md
  - cml-publish simulation/utils/machine_learning/cycle_gan/checkpoints/dr_drift_256/loss.png
    --gitlab-uploads --md --title 'Loss values' >> report.md
    # Send report.md as comment
  - cml-send-comment report.md

# Build and deploy the CI docker image to the gitlab registry
# This is done everytime the master branch is updated
.docker-images-template:
  stage: deploy
  image: docker:19.03.11
  tags:
  - docker
  services:
  - docker:19.03.11-dind
  variables:
    # Ensure that lfs files are available in resulting images!
    GIT_LFS_SKIP_SMUDGE: '0'  #  Pull Git LFS
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ''
  before_script:
  - |
    if [ "$CI_COMMIT_REF_NAME" == "master" ]; then
      export TAG_CI_IMAGE=focal
      export TAG_CI_IMAGE_DOCS=docs
      export TAG_CI_IMAGE_ML=machine_learning
      export TAG_DEFAULT_IMAGE=focal
      export TAG_DEFAULT_IMAGE_CI=ci
      export TAG_KITCAR_ROS_IMAGE=focal
    else
      export TAG_CI_IMAGE=focal_${CI_COMMIT_REF_NAME}
      export TAG_CI_IMAGE_DOCS=docs_${CI_COMMIT_REF_NAME}
      export TAG_CI_IMAGE_ML=machine_learning_${CI_COMMIT_REF_NAME}
      export TAG_DEFAULT_IMAGE=focal_${CI_COMMIT_REF_NAME}
      export TAG_DEFAULT_IMAGE_CI=ci_${CI_COMMIT_REF_NAME}
      export TAG_KITCAR_ROS_IMAGE=focal_${CI_COMMIT_REF_NAME}
    fi
  - apk add --no-cache docker-compose
  script:
  - docker --version
  - docker info
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    # Test building the ci image
  - cd simulation/docker/ci
  - /bin/sh build.sh base $TAG_CI_IMAGE
  - docker push $CI_REGISTRY/kitcar/kitcar-gazebo-simulation/ci:$TAG_CI_IMAGE
  - /bin/sh build.sh machine_learning $TAG_CI_IMAGE_ML $TAG_CI_IMAGE
  - docker push $CI_REGISTRY/kitcar/kitcar-gazebo-simulation/ci:$TAG_CI_IMAGE_ML
  - /bin/sh build.sh docs $TAG_CI_IMAGE_DOCS $TAG_CI_IMAGE_ML
  - docker push $CI_REGISTRY/kitcar/kitcar-gazebo-simulation/ci:$TAG_CI_IMAGE_DOCS
    # Test building the default image
  - cd ../default
  - /bin/sh build.sh $CI_REGISTRY $TAG_CI_IMAGE $TAG_DEFAULT_IMAGE_CI $KITCAR_REPO_PATH
  - docker push $CI_REGISTRY/kitcar/kitcar-gazebo-simulation:$TAG_DEFAULT_IMAGE_CI
  - /bin/sh build.sh $CI_REGISTRY $TAG_CI_IMAGE $TAG_DEFAULT_IMAGE /home/kitcar/
  - docker push $CI_REGISTRY/kitcar/kitcar-gazebo-simulation:$TAG_DEFAULT_IMAGE
    # Test building the kitcar_ros_ci image
  - cd ../kitcar_ros_ci
  - /bin/sh build.sh $CI_REGISTRY $TAG_DEFAULT_IMAGE_CI $TAG_KITCAR_ROS_IMAGE
  - docker push $CI_REGISTRY/kitcar/kitcar-gazebo-simulation/kitcar_ros_ci:$TAG_KITCAR_ROS_IMAGE

deploy-docker-images-master:
  extends: .docker-images-template
  # Always run on master
  only:
  - master

deploy-docker-images:
  extends: .docker-images-template
  # Allow to manually build the ci image
  # E.g. to test if the Dockerfile is still working
  except:
  - master
  when: manual
