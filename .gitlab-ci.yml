image: kitcar/docker-gazebo-build:python3.8

variables:
  GIT_STRATEGY: clone

cache:
  paths:
    - .venv/

before_script:
  #Run the container start script to enable the pulseaudio & xserver
  - bash /start_script.sh

  # Print out python version for debugging
  - python3 -V
  #Install python packages # use a virtual environment to use CI cache
  - pip3 install virtualenv
  - virtualenv .venv
  - source .venv/bin/activate
  - pip3 install -r requirements.txt

  #Move kitcar-ros to $KITCAR_REPO_PATH
  - export KITCAR_REPO_PATH=/builds/kitcar/
  - if [ -d "kitcar-ros" ]; then
  - mv kitcar-ros $KITCAR_REPO_PATH/kitcar-ros
  - source $KITCAR_REPO_PATH/kitcar-ros/init/bashrc || true
  - fi

  #Source init / This fails when the simulation has not been built
  - source init/bashrc || true

after_script:
  #Move kitcar-ros back into this folder (Necessary for artifacts!)
  - export KITCAR_REPO_PATH=/builds/kitcar/
  - if [ -d "$KITCAR_REPO_PATH/kitcar-ros" ]; then
  - mv $KITCAR_REPO_PATH/kitcar-ros kitcar-ros
  - fi

stages:
  - build
  - test
  - deploy

######## BUILD STAGE ########
# buikd kitcar-ros and simulation
build-code:
  stage: build
  script: &build-all
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@git.kitcar-team.de/kitcar/kitcar-ros.git $KITCAR_REPO_PATH/kitcar-ros
    - cd $KITCAR_REPO_PATH/kitcar-ros
    # Build only necessary parts of brain and debugger!
    - cd $KITCAR_REPO_PATH/kitcar-ros/KITcar_brain
    - catkin_make --only-pkg-with-deps common state_estimation_msgs longitudinal_controller_msgs lateral_controller_msgs

    - source $KITCAR_REPO_PATH/kitcar-ros/KITcar_brain/devel/setup.bash --extend
    - cd  $KITCAR_REPO_PATH/kitcar-ros/KITcar_debugger
    - catkin_make --only-pkg-with-deps control_debug

    - cd  $KITCAR_REPO_PATH/kitcar-gazebo-simulation/simulation
    - catkin_make
  artifacts:
    paths:
      - kitcar-ros
      - simulation/devel
      - simulation/build
    expire_in: 2 hrs


######## TEST STAGE #########

# Test if dr_drift generation script works
test-dr_drift:
  stage: test
  script: &prebuild-dr_drift
    - cd simulation/models/model_db/dr_drift
    - ./generate.sh
    #TODO: Also test if the calibration is actually correct.

# Run module test in utils packages
test-utils:
  stage: test
  script: &prebuild-test-utils
    - python3 -m geometry.test
    - python3 simulation/utils/ros_base/test/parameter_object_test.py

# Generate some roads, just for testing
test-road-generation:
  stage: test
  script: &prebuild-generation
    - cd simulation/models/env_db
    - ./generate.sh -r default-road
    - ./generate.sh -r curves

test-gazebo-simulation:
  stage: test
  script:
    - cd simulation
    - catkin_make run_tests_gazebo_simulation -j1
    - catkin_test_results # Ensure that pipeline fails when test fails

test-simulation-brain-link:
  stage: test
  script:
    - cd simulation
    - catkin_make run_tests_simulation_brain_link -j1
    - catkin_test_results # Ensure that pipeline fails when test fails


######### Documentation ########

# Build the sphinx documentation
# If this is the master branch, the website deployer will also update doc.kitcar-team.de!
build-documentation:
  stage: deploy
  script:
    - cd docs
    - make html
  artifacts: # Extract artifacts to view the documentation that has been generated
    paths:
      - docs/_build/html/*
    expire_in: 2 day
