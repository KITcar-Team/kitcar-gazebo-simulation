image: kitcar/docker-gazebo-build:python3.8

variables:
  GIT_STRATEGY: clone
  GIT_LFS_SKIP_SMUDGE: "1"  #  Don't pull Git LFS

cache:
  paths:
    - .venv/

before_script:
  #Run the container start script to enable the pulseaudio & xserver
  - bash /start_script.sh

  # Install packages
  - cat packages.txt | xargs sudo apt-get install -y

  # Print out python version for debugging
  - python3 -V
  #Install python packages # use a virtual environment to use CI cache
  - pip3 install virtualenv
  - virtualenv .venv
  - source .venv/bin/activate
  - pip3 install -r requirements.txt

  - export KITCAR_REPO_PATH=/builds/kitcar/
  #Source init / This fails when the simulation has not been built
  - source init/bashrc || true

stages:
  - build
  - test
  - deploy

######## BUILD STAGE ########
# buikd kitcar-ros and simulation
build-code:
  stage: build
  script: &build-all
    - cd  simulation
    - catkin_make
  artifacts:
    paths:
      - simulation/devel
      - simulation/build
    expire_in: 2 day


######## TEST STAGE #########

# Test if dr_drift generation script works
test-dr_drift:
  stage: test
  script: &test-dr_drift
    - cd simulation/models/model_db/dr_drift
    - ./generate.sh
    #TODO: Also test if the calibration is actually correct.

# Run module test in utils packages
test-python-packages:
  stage: test
  script: &test-utils
    - python3 -m geometry.test
    - python3 simulation/utils/ros_base/test/parameter_object_test.py

    - python3 -m road.sections.test

    # Generate roads, just for testing
    - python3 -m generate_road default_road

    - python3 -m speaker.speakers.test
    - python3 -m state_machine.test
    - python3 -m referee.test

test-ros-packages:
  stage: test
  script:
    - cd simulation
    - catkin_make run_tests -j1
    - catkin_test_results  # Ensure that pipeline fails when test fails

######### Documentation ########

# Build the sphinx documentation
# If this is the master branch, the website deployer will also update doc.kitcar-team.de!
build-documentation:
  stage: deploy
  script:
    - git lfs pull
    # Test if the onboarding documentation is correct
    - python3 docs/content/tutorials/road_examples/example.py
    # Build the documentation
    - cd docs
    - make html
  artifacts: # Extract artifacts to view the documentation that has been generated
    paths:
      - docs/_build/html/*
    expire_in: 2 day
