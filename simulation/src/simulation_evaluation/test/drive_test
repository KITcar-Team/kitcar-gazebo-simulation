#! /usr/bin/env python3
import sys
import unittest

import rospy
import rostest

from simulation.src.simulation_evaluation.src.drive_test.node import DriveTestNode


class DriveTest(unittest.TestCase):
    """Use the DriveTestNode to package a drive as a unittest.

    It will start the car and the evaluation pipeline and then check if
    the referee signals that the car has finished driving


    Modify the Expected Result:
       The parameter :param:`expected_result_state` determines which outcome of the
       drive is expected, i.e. if the car behaves right or wrong. It is equal to
       Referee.COMPLETED by default. Therefore, the test will be successful
       if the car drives correctly.
       For testing the test ( :D ) it may be useful to check negative scenarios,
       i.e. to check if wrong behavior of the car leads to a failure state.
       Then the parameter expected_result_state has to be set to Referee.FAILED.
    """

    def test_drive(self):
        """Run the test and then compare result."""
        try:
            node = DriveTestNode(run=False)
            node.run()
        except rospy.exceptions.ROSInterruptException:
            pass

        prev_states, last_states = node.last_state_machine_transition
        failure_msg = (
            f"Drive finished in state: {node.state} "
            f"(expected: {node.param.expected_result_state})\n,"
            f"the car parked {node.parking_successes} times "
            f"(expected: {node.param.expected_parking_successes})\n,"
            f"The state machines went from being in the states\n"
            f"{prev_states} to \n{last_states}."
        )

        self.assertEqual(node.state, node.param.expected_result_state, failure_msg)
        if node.param.expect_exact_parking_successes:
            self.assertEqual(
                node.parking_successes, node.param.expected_parking_successes, failure_msg
            )
        else:
            self.assertGreaterEqual(
                node.parking_successes, node.param.expected_parking_successes, failure_msg
            )


if __name__ == "__main__":
    rostest.rosrun("simulation_evaluation", "drive_test_node", DriveTest, sys.argv)
