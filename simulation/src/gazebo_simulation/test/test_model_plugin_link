#!/usr/bin/env python3
import sys
import unittest
import rospy
import math
import random

from simulation.utils.ros_base.node_base import NodeBase
from simulation.utils.geometry import Vector, Pose, Line, Point, Transform

# Messages
from gazebo_simulation.msg import SetModelTwist, SetModelPose
import geometry_msgs.msg


PKG = "gazebo_simulation"


class ModelPluginNodeTest(unittest.TestCase, NodeBase):
    """Unittest that is executed through a ROS test and checks the functionality \
            of the model_plugin_link_node.

    There are three tests:

    * test if the pose of the box can be set (coverage of set_pose & get_pose)
    * test if the twist of the box can be set (coverage of set_twist & get_twist)
    * test if the box followes along a path (circle) when only the twist is set
        (combined coverage of set_twist & get_pose in a more complex scenario)
    """

    @property
    def set_twist_topic(self):
        return (
            self.param.topics.model_plugin.namespace
            + "/"
            + self.param.car_name
            + "/"
            + self.param.topics.model_plugin.set.twist
        )

    @property
    def twist_topic(self):
        return (
            self.param.topics.model_plugin.namespace
            + "/"
            + self.param.car_name
            + "/"
            + self.param.topics.model_plugin.get.twist
        )

    @property
    def set_pose_topic(self):
        return (
            self.param.topics.model_plugin.namespace
            + "/"
            + self.param.car_name
            + "/"
            + self.param.topics.model_plugin.set.pose
        )

    @property
    def pose_topic(self):
        return (
            self.param.topics.model_plugin.namespace
            + "/"
            + self.param.car_name
            + "/"
            + self.param.topics.model_plugin.get.pose
        )

    def assert_approx_equal_pose(self, pose, pose2):
        self.assertAlmostEqual(Vector(pose), Vector(pose2))
        self.assertAlmostEqual(
            pose.get_angle(), pose2.get_angle(), delta=math.radians(0.02)
        )

    def setUp(self):
        NodeBase.__init__(self, name="test_model_plugin_node", log_level=rospy.DEBUG)

        rospy.wait_for_message(self.pose_topic, geometry_msgs.msg.Pose)
        rospy.wait_for_message(self.twist_topic, geometry_msgs.msg.Twist)

        self.set_twist_publisher = rospy.Publisher(
            self.set_twist_topic, SetModelTwist, queue_size=1
        )
        self.get_twist_subscriber = rospy.Subscriber(
            self.twist_topic, geometry_msgs.msg.Twist, self.twist_cb
        )

        self.set_pose_publisher = rospy.Publisher(
            self.set_pose_topic, SetModelPose, queue_size=1
        )
        self.get_pose_subscriber = rospy.Subscriber(
            self.pose_topic, geometry_msgs.msg.Pose, self.pose_cb
        )

        random.seed(self.param.seed + self._testMethodName)
        # Wait
        rospy.wait_for_message(self.pose_topic, geometry_msgs.msg.Pose)

        # Gazebo takes some time to start up
        # Set a pose and wait until gazebo adjusts to ensure that is has completely started

        # Reset pose / Reset twist
        self.set_twist(
            (SetModelTwist.LINEAR_X, 0),
            (SetModelTwist.LINEAR_Y, 0),
            (SetModelTwist.ANGULAR_Z, 0),
        )

        while (
            abs(self.last_received_pose.x - 1)
            + abs(self.last_received_pose.y - 1)
            + abs(self.last_received_pose.get_angle())
            + abs(Vector(self.last_received_twist.linear))
            + abs(Vector(self.last_received_twist.angular))
            > 0.001
        ):
            self.set_complete_pose(Pose([1, 1, 0], 0))
            rospy.sleep(self.param.sleep_time)
        rospy.logdebug(
            f"Starting test with pose: {self.last_received_pose} and "
            f"twist: {self.last_received_twist}"
        )

    def twist_cb(self, msg):
        self.last_received_twist = msg

    def pose_cb(self, msg):
        self.last_received_pose = Pose(msg)

    def set_twist(self, *args):
        req = SetModelTwist()
        req.keys, req.values = zip(*args)

        self.set_twist_publisher.publish(req)

    def set_pose(self, *args):
        req = SetModelPose()
        req.keys, req.values = zip(*args)
        self.set_pose_publisher.publish(req)

    def set_complete_pose(self, pose: Pose):
        self.set_pose(
            (SetModelPose.POSITION_X, pose.x),
            (SetModelPose.POSITION_Y, pose.y),
            (SetModelPose.POSITION_Z, pose.z),
            (SetModelPose.ORIENTATION_W, pose.orientation.w),
            (SetModelPose.ORIENTATION_X, pose.orientation.x),
            (SetModelPose.ORIENTATION_Y, pose.orientation.y),
            (SetModelPose.ORIENTATION_Z, pose.orientation.z),
        )

    def test_set_pose(self):
        """Set a number of random poses and check if the model is always moved correctly."""

        # Get initial z
        z = self.last_received_pose.z

        for i in range(0, 1000):
            pose = Pose([random.random(), random.random(), z], random.random())
            self.set_complete_pose(pose)

            # Wait
            # The correct pose must be set in at most 500 iterations (= 0.5 seconds)
            for _ in range(600):
                rospy.wait_for_message(self.pose_topic, geometry_msgs.msg.Pose)
                if abs(Vector(pose) - Vector(self.last_received_pose)) < 0.01 and abs(
                    pose.get_angle() - self.last_received_pose.get_angle()
                ) < math.radians(0.02):
                    break
            else:
                self.assertTrue(
                    False,
                    msg=(
                        f"Failed to set pose {pose, i},"
                        f"received {self.last_received_pose, i}"
                        f"with {abs(Vector(pose) - Vector(self.last_received_pose))} and "
                        f"{pose.get_angle() - self.last_received_pose.get_angle()} "
                    ),
                )

    def test_set_twist(self):
        """Set a number of random twists and check if the model's twist is changed correctly."""

        for i in range(0, 1000):
            lin = 10 * Vector(random.random(), random.random(), 0)
            ang = 10 * Vector(0, 0, random.random())

            self.set_twist(
                (SetModelTwist.LINEAR_X, lin.x),
                (SetModelTwist.LINEAR_Y, lin.y),
                (SetModelTwist.ANGULAR_Z, ang.z),
            )

            # Wait
            # The correct twist must be set in at most 200 iterations (= 0.2 seconds)
            for _ in range(200):
                rospy.wait_for_message(self.twist_topic, geometry_msgs.msg.Twist)
                if (
                    abs(Vector(lin) - Vector(self.last_received_twist.linear)) < 0.01
                    and abs(Vector(ang) - Vector(self.last_received_twist.angular)) < 0.01
                ):
                    break
            else:
                self.assertTrue(
                    False,
                    msg=f"Failed to set twist {lin, ang }, received {self.last_received_twist}",
                )

    def _test_movement_along_path(self):
        """CURRENTLY UNUSED DURING TESTING!

        Move the model along a circle by only modifying it's twist.
        """
        # Circular path by buffering a point:
        center = Point(-1, 0)

        # Get initial z
        z = self.last_received_pose.z

        # Path that the vehicle should travel on
        path = Transform([0, 0, z], -math.pi / 2) * Line(
            reversed([p for p in center.buffer(10, resolution=256).exterior.coords])
        )

        rospy.loginfo(f"Path: {path.get_points()[0:10]}")

        def d_x():
            d_t = rospy.get_time() - start_time
            d_x = self.param.speed * d_t
            return min(d_x, path.length)

        def current_pose():
            return path.interpolate_pose(arc_length=d_x())

        def current_twist() -> geometry_msgs.msg.Twist:
            pose: Pose = current_pose()

            # Get linear velocity
            lin = Vector(
                pose.orientation.rotate([self.param.speed, 0, 0])
            )  # Adjust magnitude to speed!

            curv = path.interpolate_curvature(arc_length=d_x())
            ang = Vector(0, 0, self.param.speed * curv)

            twist = geometry_msgs.msg.Twist()
            twist.linear = lin.to_geometry_msg()
            twist.angular = ang.to_geometry_msg()
            return twist

        # Set initial pose / Reset twist
        self.set_twist(
            (SetModelTwist.LINEAR_X, 0),
            (SetModelTwist.LINEAR_Y, 0),
            (SetModelTwist.ANGULAR_Z, 0),
        )
        self.set_complete_pose(path.interpolate_pose(arc_length=0))

        # Wait until gazebo adjusts to ensure that is has completely started

        initial_pose = path.interpolate_pose(arc_length=0)
        while (
            abs(Vector(initial_pose) - Vector(self.last_received_pose))
            + abs(Vector(self.last_received_twist.linear))
            + abs(Vector(self.last_received_twist.angular))
            > 0.001
        ):
            rospy.sleep(self.param.sleep_time)

        start_time = rospy.get_time()
        rate = rospy.Rate(self.param.rate)

        # Travel along the path
        while d_x() < path.length:
            c_twist = current_twist()

            new_vals = []
            new_vals.append((SetModelTwist.LINEAR_X, c_twist.linear.x))
            new_vals.append((SetModelTwist.LINEAR_Y, c_twist.linear.y))
            new_vals.append((SetModelTwist.ANGULAR_Z, c_twist.angular.z))

            req = SetModelTwist()
            req.keys, req.values = zip(*new_vals)

            self.set_twist_publisher.publish(req)

            rate.sleep()

            # Received position and orientation
            vec = Vector(self.last_received_pose)
            angle = self.last_received_pose.get_angle()

            # Expected position and orientation
            exp_vec = Vector(current_pose())
            exp_angle = current_pose().get_angle()

            rospy.loginfo(
                f"Received: {self.last_received_pose},\nexpected: {current_pose()}"
            )

            # Compare with currently expected pose
            self.assertAlmostEqual(
                exp_vec,
                vec,
                delta=0.05,
                msg=(
                    f"Difference between actual position {vec}"
                    f"and expected position {exp_vec} too large for arc_length {d_x()}."
                ),
            )
            self.assertTrue(
                abs(math.sin(angle - exp_angle)) < abs(math.sin(math.radians(1))),
                msg=(
                    f"Difference between actual angle {angle}"
                    f"and expected angle {exp_angle} too large for arc_length {d_x()}."
                ),
            )


if __name__ == "__main__":
    import rostest

    rostest.rosrun(PKG, "test_model_plugin", ModelPluginNodeTest, sys.argv)
