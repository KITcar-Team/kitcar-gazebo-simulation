#!/usr/bin/env python3
import sys
import rospy
import unittest
from typing import List

from simulation.utils.ros_base.node_base import NodeBase

from simulation.utils.road.sections import RoadSection

from simulation.src.simulation_groundtruth.src.groundtruth.node import GroundtruthNode

from simulation.src.simulation_groundtruth.src.groundtruth.object_controller import (
    ObjectController,
)

from simulation.utils.road.road import Road
from gazebo_simulation.msg import CarState as CarStateMsg
from simulation_groundtruth.msg import GroundtruthStatus

PKG = "simulation_groundtruth"


class ObjectControllerTestNode(unittest.TestCase, GroundtruthNode):
    """Unittest which tests the groundtruth node's object controller.

    The basic idea is to subclass the GroundtruthNode and check which
    objects are being spawned.

    Primarily two things are tested:
        _test_obstacle_spawning: Are the right number of obstacles being spawned?
    """

    def setUp(self):
        self.__road_sections: List[RoadSection] = []
        self.__spawned_models: List[str] = []
        NodeBase.__init__(self, name="object_controller_test", log_level=rospy.DEBUG)

        self.object_controller = ObjectController(
            Road(), remove_model=self._remove_model, spawn_model=self._spawn_model,
        )
        self.model_names = []
        self.car_state = CarStateMsg()

        # Initialize renderer status variables
        self._groundtruth_status = GroundtruthStatus()

        self.start()

    def _spawn_model(self, model_xml):
        """Catch all models that are being spawned."""
        self.__spawned_models.append(model_xml)
        super()._spawn_model(model_xml)

    def _test_obstacle_spawning(self):
        self.__spawned_models = []
        self.__road_sections = self._load_road().sections
        self.object_controller.load([])

        all_obstacles = sum((sec.obstacles for sec in self.__road_sections), [])
        spawned_obstacles = list(
            model_xml for model_xml in self.__spawned_models if "obstacle" in model_xml
        )

        self.assertEqual(len(all_obstacles), len(spawned_obstacles))

    def _test_traffic_sign_spawning(self):
        self.__spawned_models = []
        self.__road_sections = self._load_road().sections
        self.object_controller.load([])

        all_traffic_signs = sum((sec.traffic_signs for sec in self.__road_sections), [])
        spawned_traffic_signs = list(
            model_xml for model_xml in self.__spawned_models if "sign" in model_xml
        )

        self.assertEqual(len(all_traffic_signs), len(spawned_traffic_signs))

    def test_object_controller(self):
        self._test_obstacle_spawning()
        self._test_traffic_sign_spawning()


if __name__ == "__main__":
    import rostest

    rostest.rosrun(PKG, "test_object_controller", ObjectControllerTestNode, sys.argv)
